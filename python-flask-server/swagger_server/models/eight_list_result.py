# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EightListResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, acceptance: str=None, complete: str=None, undone: str=None, completed: str=None, rate: str=None, processing: str=None):  # noqa: E501
        """EightListResult - a model defined in Swagger

        :param area: The area of this EightListResult.  # noqa: E501
        :type area: str
        :param acceptance: The acceptance of this EightListResult.  # noqa: E501
        :type acceptance: str
        :param complete: The complete of this EightListResult.  # noqa: E501
        :type complete: str
        :param undone: The undone of this EightListResult.  # noqa: E501
        :type undone: str
        :param completed: The completed of this EightListResult.  # noqa: E501
        :type completed: str
        :param rate: The rate of this EightListResult.  # noqa: E501
        :type rate: str
        :param processing: The processing of this EightListResult.  # noqa: E501
        :type processing: str
        """
        self.swagger_types = {
            'area': str,
            'acceptance': str,
            'complete': str,
            'undone': str,
            'completed': str,
            'rate': str,
            'processing': str
        }

        self.attribute_map = {
            'area': 'area',
            'acceptance': 'acceptance',
            'complete': 'complete',
            'undone': 'undone',
            'completed': 'completed',
            'rate': 'rate',
            'processing': 'processing'
        }

        self._area = area
        self._acceptance = acceptance
        self._complete = complete
        self._undone = undone
        self._completed = completed
        self._rate = rate
        self._processing = processing

    @classmethod
    def from_dict(cls, dikt) -> 'EightListResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EightListResult of this EightListResult.  # noqa: E501
        :rtype: EightListResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self) -> str:
        """Gets the area of this EightListResult.

        by area  # noqa: E501

        :return: The area of this EightListResult.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this EightListResult.

        by area  # noqa: E501

        :param area: The area of this EightListResult.
        :type area: str
        """

        self._area = area

    @property
    def acceptance(self) -> str:
        """Gets the acceptance of this EightListResult.

        by acceptance  # noqa: E501

        :return: The acceptance of this EightListResult.
        :rtype: str
        """
        return self._acceptance

    @acceptance.setter
    def acceptance(self, acceptance: str):
        """Sets the acceptance of this EightListResult.

        by acceptance  # noqa: E501

        :param acceptance: The acceptance of this EightListResult.
        :type acceptance: str
        """

        self._acceptance = acceptance

    @property
    def complete(self) -> str:
        """Gets the complete of this EightListResult.

        by complete  # noqa: E501

        :return: The complete of this EightListResult.
        :rtype: str
        """
        return self._complete

    @complete.setter
    def complete(self, complete: str):
        """Sets the complete of this EightListResult.

        by complete  # noqa: E501

        :param complete: The complete of this EightListResult.
        :type complete: str
        """

        self._complete = complete

    @property
    def undone(self) -> str:
        """Gets the undone of this EightListResult.

        by undone  # noqa: E501

        :return: The undone of this EightListResult.
        :rtype: str
        """
        return self._undone

    @undone.setter
    def undone(self, undone: str):
        """Sets the undone of this EightListResult.

        by undone  # noqa: E501

        :param undone: The undone of this EightListResult.
        :type undone: str
        """

        self._undone = undone

    @property
    def completed(self) -> str:
        """Gets the completed of this EightListResult.

        by completed  # noqa: E501

        :return: The completed of this EightListResult.
        :rtype: str
        """
        return self._completed

    @completed.setter
    def completed(self, completed: str):
        """Sets the completed of this EightListResult.

        by completed  # noqa: E501

        :param completed: The completed of this EightListResult.
        :type completed: str
        """

        self._completed = completed

    @property
    def rate(self) -> str:
        """Gets the rate of this EightListResult.

        on-time rate  # noqa: E501

        :return: The rate of this EightListResult.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate: str):
        """Sets the rate of this EightListResult.

        on-time rate  # noqa: E501

        :param rate: The rate of this EightListResult.
        :type rate: str
        """

        self._rate = rate

    @property
    def processing(self) -> str:
        """Gets the processing of this EightListResult.

        Average processing time  # noqa: E501

        :return: The processing of this EightListResult.
        :rtype: str
        """
        return self._processing

    @processing.setter
    def processing(self, processing: str):
        """Sets the processing of this EightListResult.

        Average processing time  # noqa: E501

        :param processing: The processing of this EightListResult.
        :type processing: str
        """

        self._processing = processing
