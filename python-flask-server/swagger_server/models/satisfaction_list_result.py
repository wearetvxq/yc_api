# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SatisfactionListResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, area: str=None, visit: str=None, succ: str=None, rate: str=None, satisfaction: str=None, displeasure: str=None, unanswered: str=None, satisfaction_rate: str=None):  # noqa: E501
        """SatisfactionListResult - a model defined in Swagger

        :param id: The id of this SatisfactionListResult.  # noqa: E501
        :type id: int
        :param area: The area of this SatisfactionListResult.  # noqa: E501
        :type area: str
        :param visit: The visit of this SatisfactionListResult.  # noqa: E501
        :type visit: str
        :param succ: The succ of this SatisfactionListResult.  # noqa: E501
        :type succ: str
        :param rate: The rate of this SatisfactionListResult.  # noqa: E501
        :type rate: str
        :param satisfaction: The satisfaction of this SatisfactionListResult.  # noqa: E501
        :type satisfaction: str
        :param displeasure: The displeasure of this SatisfactionListResult.  # noqa: E501
        :type displeasure: str
        :param unanswered: The unanswered of this SatisfactionListResult.  # noqa: E501
        :type unanswered: str
        :param satisfaction_rate: The satisfaction_rate of this SatisfactionListResult.  # noqa: E501
        :type satisfaction_rate: str
        """
        self.swagger_types = {
            'id': int,
            'area': str,
            'visit': str,
            'succ': str,
            'rate': str,
            'satisfaction': str,
            'displeasure': str,
            'unanswered': str,
            'satisfaction_rate': str
        }

        self.attribute_map = {
            'id': 'id',
            'area': 'area',
            'visit': 'visit',
            'succ': 'succ',
            'rate': 'rate',
            'satisfaction': 'satisfaction',
            'displeasure': 'displeasure',
            'unanswered': 'unanswered',
            'satisfaction_rate': 'satisfactionRate'
        }

        self._id = id
        self._area = area
        self._visit = visit
        self._succ = succ
        self._rate = rate
        self._satisfaction = satisfaction
        self._displeasure = displeasure
        self._unanswered = unanswered
        self._satisfaction_rate = satisfaction_rate

    @classmethod
    def from_dict(cls, dikt) -> 'SatisfactionListResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SatisfactionListResult of this SatisfactionListResult.  # noqa: E501
        :rtype: SatisfactionListResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this SatisfactionListResult.

        ID  # noqa: E501

        :return: The id of this SatisfactionListResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this SatisfactionListResult.

        ID  # noqa: E501

        :param id: The id of this SatisfactionListResult.
        :type id: int
        """

        self._id = id

    @property
    def area(self) -> str:
        """Gets the area of this SatisfactionListResult.

        area  # noqa: E501

        :return: The area of this SatisfactionListResult.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this SatisfactionListResult.

        area  # noqa: E501

        :param area: The area of this SatisfactionListResult.
        :type area: str
        """

        self._area = area

    @property
    def visit(self) -> str:
        """Gets the visit of this SatisfactionListResult.

        Return visit  # noqa: E501

        :return: The visit of this SatisfactionListResult.
        :rtype: str
        """
        return self._visit

    @visit.setter
    def visit(self, visit: str):
        """Sets the visit of this SatisfactionListResult.

        Return visit  # noqa: E501

        :param visit: The visit of this SatisfactionListResult.
        :type visit: str
        """

        self._visit = visit

    @property
    def succ(self) -> str:
        """Gets the succ of this SatisfactionListResult.

        The number of success  # noqa: E501

        :return: The succ of this SatisfactionListResult.
        :rtype: str
        """
        return self._succ

    @succ.setter
    def succ(self, succ: str):
        """Sets the succ of this SatisfactionListResult.

        The number of success  # noqa: E501

        :param succ: The succ of this SatisfactionListResult.
        :type succ: str
        """

        self._succ = succ

    @property
    def rate(self) -> str:
        """Gets the rate of this SatisfactionListResult.

        Return success rate  # noqa: E501

        :return: The rate of this SatisfactionListResult.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate: str):
        """Sets the rate of this SatisfactionListResult.

        Return success rate  # noqa: E501

        :param rate: The rate of this SatisfactionListResult.
        :type rate: str
        """

        self._rate = rate

    @property
    def satisfaction(self) -> str:
        """Gets the satisfaction of this SatisfactionListResult.

        satisfaction total  # noqa: E501

        :return: The satisfaction of this SatisfactionListResult.
        :rtype: str
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction: str):
        """Sets the satisfaction of this SatisfactionListResult.

        satisfaction total  # noqa: E501

        :param satisfaction: The satisfaction of this SatisfactionListResult.
        :type satisfaction: str
        """

        self._satisfaction = satisfaction

    @property
    def displeasure(self) -> str:
        """Gets the displeasure of this SatisfactionListResult.

        displeasure total  # noqa: E501

        :return: The displeasure of this SatisfactionListResult.
        :rtype: str
        """
        return self._displeasure

    @displeasure.setter
    def displeasure(self, displeasure: str):
        """Sets the displeasure of this SatisfactionListResult.

        displeasure total  # noqa: E501

        :param displeasure: The displeasure of this SatisfactionListResult.
        :type displeasure: str
        """

        self._displeasure = displeasure

    @property
    def unanswered(self) -> str:
        """Gets the unanswered of this SatisfactionListResult.

        Unanswered  # noqa: E501

        :return: The unanswered of this SatisfactionListResult.
        :rtype: str
        """
        return self._unanswered

    @unanswered.setter
    def unanswered(self, unanswered: str):
        """Sets the unanswered of this SatisfactionListResult.

        Unanswered  # noqa: E501

        :param unanswered: The unanswered of this SatisfactionListResult.
        :type unanswered: str
        """

        self._unanswered = unanswered

    @property
    def satisfaction_rate(self) -> str:
        """Gets the satisfaction_rate of this SatisfactionListResult.

        Satisfaction rate  # noqa: E501

        :return: The satisfaction_rate of this SatisfactionListResult.
        :rtype: str
        """
        return self._satisfaction_rate

    @satisfaction_rate.setter
    def satisfaction_rate(self, satisfaction_rate: str):
        """Sets the satisfaction_rate of this SatisfactionListResult.

        Satisfaction rate  # noqa: E501

        :param satisfaction_rate: The satisfaction_rate of this SatisfactionListResult.
        :type satisfaction_rate: str
        """

        self._satisfaction_rate = satisfaction_rate
