# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Outcommit(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, people: str=None, type: str=None, count: str=None, model: str=None):  # noqa: E501
        """Outcommit - a model defined in Swagger

        :param people: The people of this Outcommit.  # noqa: E501
        :type people: str
        :param type: The type of this Outcommit.  # noqa: E501
        :type type: str
        :param count: The count of this Outcommit.  # noqa: E501
        :type count: str
        :param model: The model of this Outcommit.  # noqa: E501
        :type model: str
        """
        self.swagger_types = {
            'people': str,
            'type': str,
            'count': str,
            'model': str
        }

        self.attribute_map = {
            'people': 'people',
            'type': 'type',
            'count': 'count',
            'model': 'model'
        }

        self._people = people
        self._type = type
        self._count = count
        self._model = model

    @classmethod
    def from_dict(cls, dikt) -> 'Outcommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The outcommit of this Outcommit.  # noqa: E501
        :rtype: Outcommit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def people(self) -> str:
        """Gets the people of this Outcommit.

        the pepole for outbound  # noqa: E501

        :return: The people of this Outcommit.
        :rtype: str
        """
        return self._people

    @people.setter
    def people(self, people: str):
        """Sets the people of this Outcommit.

        the pepole for outbound  # noqa: E501

        :param people: The people of this Outcommit.
        :type people: str
        """

        self._people = people

    @property
    def type(self) -> str:
        """Gets the type of this Outcommit.

        the pepole for outbound  # noqa: E501

        :return: The type of this Outcommit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Outcommit.

        the pepole for outbound  # noqa: E501

        :param type: The type of this Outcommit.
        :type type: str
        """

        self._type = type

    @property
    def count(self) -> str:
        """Gets the count of this Outcommit.

        the pepole for outbound  # noqa: E501

        :return: The count of this Outcommit.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count: str):
        """Sets the count of this Outcommit.

        the pepole for outbound  # noqa: E501

        :param count: The count of this Outcommit.
        :type count: str
        """

        self._count = count

    @property
    def model(self) -> str:
        """Gets the model of this Outcommit.

        the pepole for outbound  # noqa: E501

        :return: The model of this Outcommit.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Outcommit.

        the pepole for outbound  # noqa: E501

        :param model: The model of this Outcommit.
        :type model: str
        """

        self._model = model
