# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MalfunctionListResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, area: str=None, accept: str=None, complete: str=None, timeout: str=None, rate: str=None, ave: str=None):  # noqa: E501
        """MalfunctionListResult - a model defined in Swagger

        :param id: The id of this MalfunctionListResult.  # noqa: E501
        :type id: int
        :param area: The area of this MalfunctionListResult.  # noqa: E501
        :type area: str
        :param accept: The accept of this MalfunctionListResult.  # noqa: E501
        :type accept: str
        :param complete: The complete of this MalfunctionListResult.  # noqa: E501
        :type complete: str
        :param timeout: The timeout of this MalfunctionListResult.  # noqa: E501
        :type timeout: str
        :param rate: The rate of this MalfunctionListResult.  # noqa: E501
        :type rate: str
        :param ave: The ave of this MalfunctionListResult.  # noqa: E501
        :type ave: str
        """
        self.swagger_types = {
            'id': int,
            'area': str,
            'accept': str,
            'complete': str,
            'timeout': str,
            'rate': str,
            'ave': str
        }

        self.attribute_map = {
            'id': 'id',
            'area': 'area',
            'accept': 'accept',
            'complete': 'complete',
            'timeout': 'timeout',
            'rate': 'rate',
            'ave': 'ave'
        }

        self._id = id
        self._area = area
        self._accept = accept
        self._complete = complete
        self._timeout = timeout
        self._rate = rate
        self._ave = ave

    @classmethod
    def from_dict(cls, dikt) -> 'MalfunctionListResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MalfunctionListResult of this MalfunctionListResult.  # noqa: E501
        :rtype: MalfunctionListResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MalfunctionListResult.

        ID  # noqa: E501

        :return: The id of this MalfunctionListResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MalfunctionListResult.

        ID  # noqa: E501

        :param id: The id of this MalfunctionListResult.
        :type id: int
        """

        self._id = id

    @property
    def area(self) -> str:
        """Gets the area of this MalfunctionListResult.

        area  # noqa: E501

        :return: The area of this MalfunctionListResult.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this MalfunctionListResult.

        area  # noqa: E501

        :param area: The area of this MalfunctionListResult.
        :type area: str
        """

        self._area = area

    @property
    def accept(self) -> str:
        """Gets the accept of this MalfunctionListResult.

        Accept  # noqa: E501

        :return: The accept of this MalfunctionListResult.
        :rtype: str
        """
        return self._accept

    @accept.setter
    def accept(self, accept: str):
        """Sets the accept of this MalfunctionListResult.

        Accept  # noqa: E501

        :param accept: The accept of this MalfunctionListResult.
        :type accept: str
        """

        self._accept = accept

    @property
    def complete(self) -> str:
        """Gets the complete of this MalfunctionListResult.

        complete  # noqa: E501

        :return: The complete of this MalfunctionListResult.
        :rtype: str
        """
        return self._complete

    @complete.setter
    def complete(self, complete: str):
        """Sets the complete of this MalfunctionListResult.

        complete  # noqa: E501

        :param complete: The complete of this MalfunctionListResult.
        :type complete: str
        """

        self._complete = complete

    @property
    def timeout(self) -> str:
        """Gets the timeout of this MalfunctionListResult.

        timeout  # noqa: E501

        :return: The timeout of this MalfunctionListResult.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout: str):
        """Sets the timeout of this MalfunctionListResult.

        timeout  # noqa: E501

        :param timeout: The timeout of this MalfunctionListResult.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def rate(self) -> str:
        """Gets the rate of this MalfunctionListResult.

        on-time rate  # noqa: E501

        :return: The rate of this MalfunctionListResult.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate: str):
        """Sets the rate of this MalfunctionListResult.

        on-time rate  # noqa: E501

        :param rate: The rate of this MalfunctionListResult.
        :type rate: str
        """

        self._rate = rate

    @property
    def ave(self) -> str:
        """Gets the ave of this MalfunctionListResult.

        Average duration  # noqa: E501

        :return: The ave of this MalfunctionListResult.
        :rtype: str
        """
        return self._ave

    @ave.setter
    def ave(self, ave: str):
        """Sets the ave of this MalfunctionListResult.

        Average duration  # noqa: E501

        :param ave: The ave of this MalfunctionListResult.
        :type ave: str
        """

        self._ave = ave
