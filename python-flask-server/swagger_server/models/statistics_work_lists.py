# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StatisticsWorkLists(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, work: str=None, type: str=None, factory: str=None, model: str=None, balance: str=None, storage: str=None, outbound: str=None, scrapped: str=None, _return: str=None, stock: str=None):  # noqa: E501
        """StatisticsWorkLists - a model defined in Swagger

        :param id: The id of this StatisticsWorkLists.  # noqa: E501
        :type id: int
        :param work: The work of this StatisticsWorkLists.  # noqa: E501
        :type work: str
        :param type: The type of this StatisticsWorkLists.  # noqa: E501
        :type type: str
        :param factory: The factory of this StatisticsWorkLists.  # noqa: E501
        :type factory: str
        :param model: The model of this StatisticsWorkLists.  # noqa: E501
        :type model: str
        :param balance: The balance of this StatisticsWorkLists.  # noqa: E501
        :type balance: str
        :param storage: The storage of this StatisticsWorkLists.  # noqa: E501
        :type storage: str
        :param outbound: The outbound of this StatisticsWorkLists.  # noqa: E501
        :type outbound: str
        :param scrapped: The scrapped of this StatisticsWorkLists.  # noqa: E501
        :type scrapped: str
        :param _return: The _return of this StatisticsWorkLists.  # noqa: E501
        :type _return: str
        :param stock: The stock of this StatisticsWorkLists.  # noqa: E501
        :type stock: str
        """
        self.swagger_types = {
            'id': int,
            'work': str,
            'type': str,
            'factory': str,
            'model': str,
            'balance': str,
            'storage': str,
            'outbound': str,
            'scrapped': str,
            '_return': str,
            'stock': str
        }

        self.attribute_map = {
            'id': 'id',
            'work': 'work',
            'type': 'type',
            'factory': 'factory',
            'model': 'model',
            'balance': 'balance',
            'storage': 'storage',
            'outbound': 'outbound',
            'scrapped': 'scrapped',
            '_return': 'return',
            'stock': 'stock'
        }

        self._id = id
        self._work = work
        self._type = type
        self._factory = factory
        self._model = model
        self._balance = balance
        self._storage = storage
        self._outbound = outbound
        self._scrapped = scrapped
        self.__return = _return
        self._stock = stock

    @classmethod
    def from_dict(cls, dikt) -> 'StatisticsWorkLists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatisticsWorkLists of this StatisticsWorkLists.  # noqa: E501
        :rtype: StatisticsWorkLists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this StatisticsWorkLists.

        ID  # noqa: E501

        :return: The id of this StatisticsWorkLists.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this StatisticsWorkLists.

        ID  # noqa: E501

        :param id: The id of this StatisticsWorkLists.
        :type id: int
        """

        self._id = id

    @property
    def work(self) -> str:
        """Gets the work of this StatisticsWorkLists.

        workstation  # noqa: E501

        :return: The work of this StatisticsWorkLists.
        :rtype: str
        """
        return self._work

    @work.setter
    def work(self, work: str):
        """Sets the work of this StatisticsWorkLists.

        workstation  # noqa: E501

        :param work: The work of this StatisticsWorkLists.
        :type work: str
        """

        self._work = work

    @property
    def type(self) -> str:
        """Gets the type of this StatisticsWorkLists.

        terminal type  # noqa: E501

        :return: The type of this StatisticsWorkLists.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this StatisticsWorkLists.

        terminal type  # noqa: E501

        :param type: The type of this StatisticsWorkLists.
        :type type: str
        """

        self._type = type

    @property
    def factory(self) -> str:
        """Gets the factory of this StatisticsWorkLists.

        factory  # noqa: E501

        :return: The factory of this StatisticsWorkLists.
        :rtype: str
        """
        return self._factory

    @factory.setter
    def factory(self, factory: str):
        """Sets the factory of this StatisticsWorkLists.

        factory  # noqa: E501

        :param factory: The factory of this StatisticsWorkLists.
        :type factory: str
        """

        self._factory = factory

    @property
    def model(self) -> str:
        """Gets the model of this StatisticsWorkLists.

        model  # noqa: E501

        :return: The model of this StatisticsWorkLists.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this StatisticsWorkLists.

        model  # noqa: E501

        :param model: The model of this StatisticsWorkLists.
        :type model: str
        """

        self._model = model

    @property
    def balance(self) -> str:
        """Gets the balance of this StatisticsWorkLists.

        Previous balance  # noqa: E501

        :return: The balance of this StatisticsWorkLists.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance: str):
        """Sets the balance of this StatisticsWorkLists.

        Previous balance  # noqa: E501

        :param balance: The balance of this StatisticsWorkLists.
        :type balance: str
        """

        self._balance = balance

    @property
    def storage(self) -> str:
        """Gets the storage of this StatisticsWorkLists.

        The number of warehousing  # noqa: E501

        :return: The storage of this StatisticsWorkLists.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage: str):
        """Sets the storage of this StatisticsWorkLists.

        The number of warehousing  # noqa: E501

        :param storage: The storage of this StatisticsWorkLists.
        :type storage: str
        """

        self._storage = storage

    @property
    def outbound(self) -> str:
        """Gets the outbound of this StatisticsWorkLists.

        The current library release quantity  # noqa: E501

        :return: The outbound of this StatisticsWorkLists.
        :rtype: str
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound: str):
        """Sets the outbound of this StatisticsWorkLists.

        The current library release quantity  # noqa: E501

        :param outbound: The outbound of this StatisticsWorkLists.
        :type outbound: str
        """

        self._outbound = outbound

    @property
    def scrapped(self) -> str:
        """Gets the scrapped of this StatisticsWorkLists.

        Current scrap quantity  # noqa: E501

        :return: The scrapped of this StatisticsWorkLists.
        :rtype: str
        """
        return self._scrapped

    @scrapped.setter
    def scrapped(self, scrapped: str):
        """Sets the scrapped of this StatisticsWorkLists.

        Current scrap quantity  # noqa: E501

        :param scrapped: The scrapped of this StatisticsWorkLists.
        :type scrapped: str
        """

        self._scrapped = scrapped

    @property
    def _return(self) -> str:
        """Gets the _return of this StatisticsWorkLists.

        The number of returns in this period  # noqa: E501

        :return: The _return of this StatisticsWorkLists.
        :rtype: str
        """
        return self.__return

    @_return.setter
    def _return(self, _return: str):
        """Sets the _return of this StatisticsWorkLists.

        The number of returns in this period  # noqa: E501

        :param _return: The _return of this StatisticsWorkLists.
        :type _return: str
        """

        self.__return = _return

    @property
    def stock(self) -> str:
        """Gets the stock of this StatisticsWorkLists.

        Inventory balance  # noqa: E501

        :return: The stock of this StatisticsWorkLists.
        :rtype: str
        """
        return self._stock

    @stock.setter
    def stock(self, stock: str):
        """Sets the stock of this StatisticsWorkLists.

        Inventory balance  # noqa: E501

        :param stock: The stock of this StatisticsWorkLists.
        :type stock: str
        """

        self._stock = stock
