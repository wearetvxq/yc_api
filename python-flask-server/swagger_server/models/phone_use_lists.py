# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PhoneUseLists(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, work: str=None, business: str=None, order: str=None, modem: str=None, gateway: str=None, box: str=None, hemu: str=None, phone: str=None, personnel: str=None):  # noqa: E501
        """PhoneUseLists - a model defined in Swagger

        :param work: The work of this PhoneUseLists.  # noqa: E501
        :type work: str
        :param business: The business of this PhoneUseLists.  # noqa: E501
        :type business: str
        :param order: The order of this PhoneUseLists.  # noqa: E501
        :type order: str
        :param modem: The modem of this PhoneUseLists.  # noqa: E501
        :type modem: str
        :param gateway: The gateway of this PhoneUseLists.  # noqa: E501
        :type gateway: str
        :param box: The box of this PhoneUseLists.  # noqa: E501
        :type box: str
        :param hemu: The hemu of this PhoneUseLists.  # noqa: E501
        :type hemu: str
        :param phone: The phone of this PhoneUseLists.  # noqa: E501
        :type phone: str
        :param personnel: The personnel of this PhoneUseLists.  # noqa: E501
        :type personnel: str
        """
        self.swagger_types = {
            'work': str,
            'business': str,
            'order': str,
            'modem': str,
            'gateway': str,
            'box': str,
            'hemu': str,
            'phone': str,
            'personnel': str
        }

        self.attribute_map = {
            'work': 'work',
            'business': 'business',
            'order': 'order',
            'modem': 'modem',
            'gateway': 'gateway',
            'box': 'box',
            'hemu': 'hemu',
            'phone': 'phone',
            'personnel': 'personnel'
        }

        self._work = work
        self._business = business
        self._order = order
        self._modem = modem
        self._gateway = gateway
        self._box = box
        self._hemu = hemu
        self._phone = phone
        self._personnel = personnel

    @classmethod
    def from_dict(cls, dikt) -> 'PhoneUseLists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The phoneUseLists of this PhoneUseLists.  # noqa: E501
        :rtype: PhoneUseLists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def work(self) -> str:
        """Gets the work of this PhoneUseLists.

        workstation  # noqa: E501

        :return: The work of this PhoneUseLists.
        :rtype: str
        """
        return self._work

    @work.setter
    def work(self, work: str):
        """Sets the work of this PhoneUseLists.

        workstation  # noqa: E501

        :param work: The work of this PhoneUseLists.
        :type work: str
        """

        self._work = work

    @property
    def business(self) -> str:
        """Gets the business of this PhoneUseLists.

        business type  # noqa: E501

        :return: The business of this PhoneUseLists.
        :rtype: str
        """
        return self._business

    @business.setter
    def business(self, business: str):
        """Sets the business of this PhoneUseLists.

        business type  # noqa: E501

        :param business: The business of this PhoneUseLists.
        :type business: str
        """

        self._business = business

    @property
    def order(self) -> str:
        """Gets the order of this PhoneUseLists.

        Work order  # noqa: E501

        :return: The order of this PhoneUseLists.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order: str):
        """Sets the order of this PhoneUseLists.

        Work order  # noqa: E501

        :param order: The order of this PhoneUseLists.
        :type order: str
        """

        self._order = order

    @property
    def modem(self) -> str:
        """Gets the modem of this PhoneUseLists.

        Modem bar code  # noqa: E501

        :return: The modem of this PhoneUseLists.
        :rtype: str
        """
        return self._modem

    @modem.setter
    def modem(self, modem: str):
        """Sets the modem of this PhoneUseLists.

        Modem bar code  # noqa: E501

        :param modem: The modem of this PhoneUseLists.
        :type modem: str
        """

        self._modem = modem

    @property
    def gateway(self) -> str:
        """Gets the gateway of this PhoneUseLists.

        Gateway barcode  # noqa: E501

        :return: The gateway of this PhoneUseLists.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: str):
        """Sets the gateway of this PhoneUseLists.

        Gateway barcode  # noqa: E501

        :param gateway: The gateway of this PhoneUseLists.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def box(self) -> str:
        """Gets the box of this PhoneUseLists.

        Set-top box barcode  # noqa: E501

        :return: The box of this PhoneUseLists.
        :rtype: str
        """
        return self._box

    @box.setter
    def box(self, box: str):
        """Sets the box of this PhoneUseLists.

        Set-top box barcode  # noqa: E501

        :param box: The box of this PhoneUseLists.
        :type box: str
        """

        self._box = box

    @property
    def hemu(self) -> str:
        """Gets the hemu of this PhoneUseLists.

        hemu bar code  # noqa: E501

        :return: The hemu of this PhoneUseLists.
        :rtype: str
        """
        return self._hemu

    @hemu.setter
    def hemu(self, hemu: str):
        """Sets the hemu of this PhoneUseLists.

        hemu bar code  # noqa: E501

        :param hemu: The hemu of this PhoneUseLists.
        :type hemu: str
        """

        self._hemu = hemu

    @property
    def phone(self) -> str:
        """Gets the phone of this PhoneUseLists.

        Fixed phone barcode  # noqa: E501

        :return: The phone of this PhoneUseLists.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this PhoneUseLists.

        Fixed phone barcode  # noqa: E501

        :param phone: The phone of this PhoneUseLists.
        :type phone: str
        """

        self._phone = phone

    @property
    def personnel(self) -> str:
        """Gets the personnel of this PhoneUseLists.

        Installation staff  # noqa: E501

        :return: The personnel of this PhoneUseLists.
        :rtype: str
        """
        return self._personnel

    @personnel.setter
    def personnel(self, personnel: str):
        """Sets the personnel of this PhoneUseLists.

        Installation staff  # noqa: E501

        :param personnel: The personnel of this PhoneUseLists.
        :type personnel: str
        """

        self._personnel = personnel
