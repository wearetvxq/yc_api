# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InstalledTopLists(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, top: str=None, area: str=None, type: str=None, account: str=None, pboss: str=None, times: str=None):  # noqa: E501
        """InstalledTopLists - a model defined in Swagger

        :param id: The id of this InstalledTopLists.  # noqa: E501
        :type id: int
        :param top: The top of this InstalledTopLists.  # noqa: E501
        :type top: str
        :param area: The area of this InstalledTopLists.  # noqa: E501
        :type area: str
        :param type: The type of this InstalledTopLists.  # noqa: E501
        :type type: str
        :param account: The account of this InstalledTopLists.  # noqa: E501
        :type account: str
        :param pboss: The pboss of this InstalledTopLists.  # noqa: E501
        :type pboss: str
        :param times: The times of this InstalledTopLists.  # noqa: E501
        :type times: str
        """
        self.swagger_types = {
            'id': int,
            'top': str,
            'area': str,
            'type': str,
            'account': str,
            'pboss': str,
            'times': str
        }

        self.attribute_map = {
            'id': 'id',
            'top': 'top',
            'area': 'area',
            'type': 'type',
            'account': 'account',
            'pboss': 'pboss',
            'times': 'times'
        }

        self._id = id
        self._top = top
        self._area = area
        self._type = type
        self._account = account
        self._pboss = pboss
        self._times = times

    @classmethod
    def from_dict(cls, dikt) -> 'InstalledTopLists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InstalledTopLists of this InstalledTopLists.  # noqa: E501
        :rtype: InstalledTopLists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this InstalledTopLists.

        id  # noqa: E501

        :return: The id of this InstalledTopLists.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this InstalledTopLists.

        id  # noqa: E501

        :param id: The id of this InstalledTopLists.
        :type id: int
        """

        self._id = id

    @property
    def top(self) -> str:
        """Gets the top of this InstalledTopLists.

        top  # noqa: E501

        :return: The top of this InstalledTopLists.
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top: str):
        """Sets the top of this InstalledTopLists.

        top  # noqa: E501

        :param top: The top of this InstalledTopLists.
        :type top: str
        """

        self._top = top

    @property
    def area(self) -> str:
        """Gets the area of this InstalledTopLists.

        area  # noqa: E501

        :return: The area of this InstalledTopLists.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this InstalledTopLists.

        area  # noqa: E501

        :param area: The area of this InstalledTopLists.
        :type area: str
        """

        self._area = area

    @property
    def type(self) -> str:
        """Gets the type of this InstalledTopLists.

        type  # noqa: E501

        :return: The type of this InstalledTopLists.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this InstalledTopLists.

        type  # noqa: E501

        :param type: The type of this InstalledTopLists.
        :type type: str
        """

        self._type = type

    @property
    def account(self) -> str:
        """Gets the account of this InstalledTopLists.

        account  # noqa: E501

        :return: The account of this InstalledTopLists.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account: str):
        """Sets the account of this InstalledTopLists.

        account  # noqa: E501

        :param account: The account of this InstalledTopLists.
        :type account: str
        """

        self._account = account

    @property
    def pboss(self) -> str:
        """Gets the pboss of this InstalledTopLists.

        PBOSS  # noqa: E501

        :return: The pboss of this InstalledTopLists.
        :rtype: str
        """
        return self._pboss

    @pboss.setter
    def pboss(self, pboss: str):
        """Sets the pboss of this InstalledTopLists.

        PBOSS  # noqa: E501

        :param pboss: The pboss of this InstalledTopLists.
        :type pboss: str
        """

        self._pboss = pboss

    @property
    def times(self) -> str:
        """Gets the times of this InstalledTopLists.

        Acceptance time  # noqa: E501

        :return: The times of this InstalledTopLists.
        :rtype: str
        """
        return self._times

    @times.setter
    def times(self, times: str):
        """Sets the times of this InstalledTopLists.

        Acceptance time  # noqa: E501

        :param times: The times of this InstalledTopLists.
        :type times: str
        """

        self._times = times
